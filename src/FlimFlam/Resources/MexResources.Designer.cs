//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OldFlimflam.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class MexResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MexResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("OldFlimflam.Resources.MexResources", typeof(MexResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap autoscroll {
            get {
                object obj = ResourceManager.GetObject("autoscroll", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds the listener detailed by the hostname and port into the list of listeners which are to be added by Tex on startup..
        /// </summary>
        internal static string btnAddNewListener {
            get {
                return ResourceManager.GetString("btnAddNewListener", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This button will choose a set of defaults which work well for most people when developing on an XP Workstation.  It is recommended that these defaults are used for developers new to using//Bilge..
        /// </summary>
        internal static string btnDevelopmentDefaults {
            get {
                return ResourceManager.GetString("btnDevelopmentDefaults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reads the environment settings from the current machine and applies those settings to the options dialog box. All user changes will be lost..
        /// </summary>
        internal static string btnReadEnvironment {
            get {
                return ResourceManager.GetString("btnReadEnvironment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will set all of the options on this screen to options suitable for a release environment.  N.B. by default release environments should not have the environment variable therefore this is unnecessary.  However once an environment variable is set this is a good way to unset it..
        /// </summary>
        internal static string btnReleaseDefaults {
            get {
                return ResourceManager.GetString("btnReleaseDefaults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes the selected TCP listener from the list of listeners which are to be used by//Bilge..
        /// </summary>
        internal static string btnRemoveSelected {
            get {
                return ResourceManager.GetString("btnRemoveSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Takes the value of the settings specified and applies it to the TEX_INIT environment variable on the local machine.  This operation takes much longer than you would expect..
        /// </summary>
        internal static string btnSetEnvironment {
            get {
                return ResourceManager.GetString("btnSetEnvironment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether all of the messages recieved by Mex are recorded out to disk files. This import logging allows you to save all of the data Mex recieves to files which can be loaded in later..
        /// </summary>
        internal static string chkActivateImportLogging {
            get {
                return ResourceManager.GetString("chkActivateImportLogging", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled then stack information is added to every trace message.  This allows the display of method and class names in the trace output but incurs a significant performance overhead.  To greatly improve the performance of Tex logging disable this feature..
        /// </summary>
        internal static string chkAddStackInfo {
            get {
                return ResourceManager.GetString("chkAddStackInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds the default Tex listener into the .net listener collection.  The default listener uses the windows OutputDebugString API to send messages to Mex and has interactive assertion dialogs.  The output from this listener can be displayed in tools other than Mex – such as DebugView.  This listener does not work properly for all server configurations and is designed for developers using Tex/Mex on their desktop..
        /// </summary>
        internal static string chkAddTexListener {
            get {
                return ResourceManager.GetString("chkAddTexListener", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asks Mex to check for user input during intensive loops and attempt to cancel.  This slows down the Mex processing considerably - making the loops take longer but does allow you to cancel the operation if its taking too long..
        /// </summary>
        internal static string chkAllowCancelOperations {
            get {
                return ResourceManager.GetString("chkAllowCancelOperations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled then internal messages can be displayed in the views (if the filter permits this). Internal messages are instructions to Mex and messages which are not normally displayed..
        /// </summary>
        internal static string chkAllowInternalMessageDisplays {
            get {
                return ResourceManager.GetString("chkAllowInternalMessageDisplays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically refreshes the view that you are looking at when new messages arrive in the background..
        /// </summary>
        internal static string chkAutoRefresh {
            get {
                return ResourceManager.GetString("chkAutoRefresh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically scrolls the view that you are looking at when new messages arrive in the background..
        /// </summary>
        internal static string chkAutoScroll {
            get {
                return ResourceManager.GetString("chkAutoScroll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is ticked then whenever there is no process selected but there is process data within Mex the first process will be selected..
        /// </summary>
        internal static string chkAutoSelectProcessIfNoneSelected {
            get {
                return ResourceManager.GetString("chkAutoSelectProcessIfNoneSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes CRLF combinations from the output, which display as little squares in the list views..
        /// </summary>
        internal static string chkBeautifyOutput {
            get {
                return ResourceManager.GetString("chkBeautifyOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether the internal index that Mex uses for messages is displayed in the output..
        /// </summary>
        internal static string chkDisplayGlobalIndexInMainView {
            get {
                return ResourceManager.GetString("chkDisplayGlobalIndexInMainView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is enabled then the details view will include a list of the event logs which occurred before the one selected.  This is a slightly slow operation therefore disable this for performance..
        /// </summary>
        internal static string chkEnableBacktrace {
            get {
                return ResourceManager.GetString("chkEnableBacktrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether Tex enhancements are enabled, if they are then additional features such as custom replacements within the trace strings are enabled.  This should typically be off unless you are using the additional features.
        /// </summary>
        internal static string chkEnableEnhancements {
            get {
                return ResourceManager.GetString("chkEnableEnhancements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is set an additional environment variable will be created to inform Tex that the default Tex Assertion dialog should present itself showing full details when displayed..
        /// </summary>
        internal static string chkExpandAssertions {
            get {
                return ResourceManager.GetString("chkExpandAssertions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is enabled then the module identities will be saved with filters as they are persisted to disk..
        /// </summary>
        internal static string chkFilterDefaultIncludeModules {
            get {
                return ResourceManager.GetString("chkFilterDefaultIncludeModules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is enabled then class names will be saved with filteres as they are persisted to disk..
        /// </summary>
        internal static string chkFilterDefaultIncludesClasses {
            get {
                return ResourceManager.GetString("chkFilterDefaultIncludesClasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is enabled then locations will be saved with filters as they are persisted to disk..
        /// </summary>
        internal static string chkFilterDefaultIncludesLocations {
            get {
                return ResourceManager.GetString("chkFilterDefaultIncludesLocations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is enabled then thread identities will be saved with filters as they are persisted to disk..
        /// </summary>
        internal static string chkFilterDefaultIncludesThreads {
            get {
                return ResourceManager.GetString("chkFilterDefaultIncludesThreads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is ticked then when cross process view is used a default highlight colour scheme will be applied to separate each of the processes that are added.  This highlight overrides any highlight that you may be using..
        /// </summary>
        internal static string chkHighlightCrossProcesses {
            get {
                return ResourceManager.GetString("chkHighlightCrossProcesses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled then, when recording input messages, those messages recieved from the local OutputDebugString listener will be included in the file..
        /// </summary>
        internal static string chkImportLoggingInlcudedsODS {
            get {
                return ResourceManager.GetString("chkImportLoggingInlcudedsODS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled any OutputDebugString messages that are intercepted from a process which Mex is already watching will be copied into that processes view. This allows output which is not formatted in a Tex compatible way to arrive in the same view as the Tex formatted output..
        /// </summary>
        internal static string chkImportMatchingPIDODSIntoEvents {
            get {
                return ResourceManager.GetString("chkImportMatchingPIDODSIntoEvents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled then when logging content out to a file any content which is read from a file will be included in the output. N.B. this can generate very large files..
        /// </summary>
        internal static string chkIncludeFileContents {
            get {
                return ResourceManager.GetString("chkIncludeFileContents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled then when recording input messages, those messages recieved via the TCP listeners will be written out to the log files..
        /// </summary>
        internal static string chkInlucdeTCPContents {
            get {
                return ResourceManager.GetString("chkInlucdeTCPContents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is ticked then when trace messages from the same process are placed into the specific process a copy will be left in the generic main view..
        /// </summary>
        internal static string chkLeaveMatchingPidsInNonTracedToo {
            get {
                return ResourceManager.GetString("chkLeaveMatchingPidsInNonTracedToo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled then the TCP listener will display interactive dialogs if an Error or Assertion condition occurs. Tex will check that an interactive user is logged on before presenting a dialog box.  This is the best choice if you wish to see assertions as they occur and therefore this would typically be true, however if the target application is running on an unattended session then this should be set to false..
        /// </summary>
        internal static string chkMakeTcpInteractive {
            get {
                return ResourceManager.GetString("chkMakeTcpInteractive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is enabled then when a process is purged any copies of that process are also purged..
        /// </summary>
        internal static string chkMatchingNamePurgeAlsoClearsPartials {
            get {
                return ResourceManager.GetString("chkMatchingNamePurgeAlsoClearsPartials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is ticked then when a process is purged any copies of that process will also be purged..
        /// </summary>
        internal static string chkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartials {
            get {
                return ResourceManager.GetString(@"chkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartialschkMatchingNamePurgeAlsoClearsPartials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled Mex will check for matching process names each time a new process is found. If a process name match is found then the old one will be removed to keep only one instance of the named application in Mex.  This is useful when debugging and repeatedly restarting an application to display only the latest run..
        /// </summary>
        internal static string chkRecycleProcessWhenNameMatches {
            get {
                return ResourceManager.GetString("chkRecycleProcessWhenNameMatches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled then when the directory used to store filters is changed all of the existing filters will be copied to the new location..
        /// </summary>
        internal static string chkRelocateOnChange {
            get {
                return ResourceManager.GetString("chkRelocateOnChange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled the Tex configuration will be set to remove all of the listeners from the .net listener collection before any Tex listeners are added.  This is normally used to disable the default .net listener..
        /// </summary>
        internal static string chkRemoveAll {
            get {
                return ResourceManager.GetString("chkRemoveAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled Mex will check the entries when they arrive for duplicates, if a duplicate is detected it will be discarded and not imported into the data store.  Typically this is used when more than one listener is configured in the target application which can result in all messages being duplicated in Mex..
        /// </summary>
        internal static string chkRemoveDupes {
            get {
                return ResourceManager.GetString("chkRemoveDupes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes duplicate entries at display time, this will filter out the entries from the display, not delete the data in Mex. .
        /// </summary>
        internal static string chkRemoveDupesOnDisplay {
            get {
                return ResourceManager.GetString("chkRemoveDupesOnDisplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Respects the current filter.  If this is unticked then no filtering at all will be applied to the view..
        /// </summary>
        internal static string chkRespectFilter {
            get {
                return ResourceManager.GetString("chkRespectFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is ticked then when a new process is selected (from the menu) the Process view for that process is automatically displayed..
        /// </summary>
        internal static string chkSelectingProcessSelectsProcessView {
            get {
                return ResourceManager.GetString("chkSelectingProcessSelectsProcessView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled the timings view will not treat timer starts and stops as scoped by thread. This will typically mess up the results for a multithreaded application but is the only way to get timings if you start a timer on one thread and stop it on another..
        /// </summary>
        internal static string chkTimingsViewIgnoresThreads {
            get {
                return ResourceManager.GetString("chkTimingsViewIgnoresThreads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether Tex should use internal caching for the messages.  If this is enabled then a background thread is created within Tex which will send all of the messages to the trace stream.  This allows the application to run as smoothly as possible but results in an additional thread and additional memory consumption..
        /// </summary>
        internal static string chkUseHighPerf {
            get {
                return ResourceManager.GetString("chkUseHighPerf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When enabled Mex will use the name passed by Tex instead of the PID of a process.  This will be used in labels and menus which refer to the process lists.  If Mex has not received any process information then this will display the PID as before. Defaults to Off to maintain backward compatibility.  Introduced in Mex 2.3.0.0..
        /// </summary>
        internal static string chkUseRenderNameNotPID {
            get {
                return ResourceManager.GetString("chkUseRenderNameNotPID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled then your filter will be applied to timed view.  Timed view is dependant on timing messages being present in the trace stream therefore if the filter is used you can get unpredictable results if you filter out timed messages.  The default is that Mex uses its own filter for timed view.
        /// </summary>
        internal static string chkWotTimedViewToo {
            get {
                return ResourceManager.GetString("chkWotTimedViewToo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places a copy of Application initialisation messages into the main view..
        /// </summary>
        internal static string chkXRefAppInitialises {
            get {
                return ResourceManager.GetString("chkXRefAppInitialises", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places a copy of assertion messages into the main view..
        /// </summary>
        internal static string chkXRefCheckAssertions {
            get {
                return ResourceManager.GetString("chkXRefCheckAssertions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places a copy of Error messages into the main view..
        /// </summary>
        internal static string chkXRefErrors {
            get {
                return ResourceManager.GetString("chkXRefErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places a copy of Exceptions into the main view..
        /// </summary>
        internal static string chkXRefExceptions {
            get {
                return ResourceManager.GetString("chkXRefExceptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places a copy of Logs into the Main View.  WARNING this will duplicate all logs internally and make Mex store a lot of inforamtion..
        /// </summary>
        internal static string chkXRefLogs {
            get {
                return ResourceManager.GetString("chkXRefLogs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places a copy of resource messages into the main view..
        /// </summary>
        internal static string chkXRefResourceMessages {
            get {
                return ResourceManager.GetString("chkXRefResourceMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places a copy of verbose logs into the main view..
        /// </summary>
        internal static string chkXRefVerbLogs {
            get {
                return ResourceManager.GetString("chkXRefVerbLogs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Places a copy of Warning messages into the main view..
        /// </summary>
        internal static string chkXRefWarnings {
            get {
                return ResourceManager.GetString("chkXRefWarnings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines how Mex should display threads.  The thread can be specified by its Operating System thread identifier or its .net thread identifier or a combination of both..
        /// </summary>
        internal static string grpThreadDisplayOptions {
            get {
                return ResourceManager.GetString("grpThreadDisplayOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets the trace level for//Bilge.  The trace level can be one of the values specified. Off: No Trace. Info:Normal Trace. Error:Minimal Trace. Verbose:Full Trace. Warning: Slightly more than Error..
        /// </summary>
        internal static string grpTraceLevel {
            get {
                return ResourceManager.GetString("grpTraceLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines how you wish to view Mex internal messages..
        /// </summary>
        internal static string grpUserMessageNotificationOptions {
            get {
                return ResourceManager.GetString("grpUserMessageNotificationOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the list of TCP listeners that will be used, it is possible to have many different TCP listeners running at once to route trace messages to many different Mex viewers..
        /// </summary>
        internal static string lbxAddTCPListeners {
            get {
                return ResourceManager.GetString("lbxAddTCPListeners", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;hlp idr=&quot;grpTraceLevel&quot;/&gt;.
        /// </summary>
        internal static string rdoErrorLevel {
            get {
                return ResourceManager.GetString("rdoErrorLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;hlp idr=&quot;grpTraceLevel&quot;/&gt;.
        /// </summary>
        internal static string rdoTraceInfo {
            get {
                return ResourceManager.GetString("rdoTraceInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;hlp idr=&quot;grpTraceLevel&quot;/&gt;.
        /// </summary>
        internal static string rdoTraceOff {
            get {
                return ResourceManager.GetString("rdoTraceOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;hlp idr=&quot;grpTraceLevel&quot;/&gt;.
        /// </summary>
        internal static string rdoVerboseLevel {
            get {
                return ResourceManager.GetString("rdoVerboseLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;hlp idr=&quot;grpTraceLevel&quot;/&gt;.
        /// </summary>
        internal static string rdoWarningLevel {
            get {
                return ResourceManager.GetString("rdoWarningLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap refresh {
            get {
                object obj = ResourceManager.GetObject("refresh", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the configuration string which is generated from the options that are chosen on this dialog. This configuration string can be passed to Tex to allow it to configure itself correctly.  The default method of doing this is to store this configuration string to an environment variable using the Set Environment button..
        /// </summary>
        internal static string txtGeneratedString {
            get {
                return ResourceManager.GetString("txtGeneratedString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Decides which IP address Mex is listening for messages on.  The best option is *.
        /// </summary>
        internal static string txtIPBinding {
            get {
                return ResourceManager.GetString("txtIPBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IP address or hostname to which Tex should stream messages when using a TCP listener.  The host or IP must already have Mex running and listening for messages to be visible, if no socket connection can be made then Tex will not try again for a timeout period.  After setting the IP and Port add the TCP listener using the button.  The TCP listener is the best choice for Server operating systems..
        /// </summary>
        internal static string txtIPInit {
            get {
                return ResourceManager.GetString("txtIPInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines how long it is an import is allowed to run for before Mex attempts to notify the user that the import is still going on..
        /// </summary>
        internal static string txtLongRunningOps {
            get {
                return ResourceManager.GetString("txtLongRunningOps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Decides which Port Mex listens on the default is 9060..
        /// </summary>
        internal static string txtPortBinding {
            get {
                return ResourceManager.GetString("txtPortBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The port which the TCP Listener should use for communication.  This port MUST match the port to which Mex is set up to listen otherwise no content will arrive at the destination.  The default Mex port is 9060..
        /// </summary>
        internal static string txtPortInit {
            get {
                return ResourceManager.GetString("txtPortInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines how frequently the UI checks to automatically refresh itself.
        /// </summary>
        internal static string txtUIRefreshFrequency {
            get {
                return ResourceManager.GetString("txtUIRefreshFrequency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines how many internal Mex messages to store.  Internal operations and notifications are stored in a log and after this many messages the log will recycle..
        /// </summary>
        internal static string txtUserLogSize {
            get {
                return ResourceManager.GetString("txtUserLogSize", resourceCulture);
            }
        }
    }
}
